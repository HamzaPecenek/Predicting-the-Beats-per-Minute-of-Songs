{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "635c1b05",
   "metadata": {
    "papermill": {
     "duration": 0.00375,
     "end_time": "2025-09-03T08:13:15.666736",
     "exception": false,
     "start_time": "2025-09-03T08:13:15.662986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TPS 2025 S5E9 — BPM Prediction (LightGBM Baseline)\n",
    "**Fast baseline with clean config, OOF diagnostics, and submit.csv**\n",
    "\n",
    " **Data path**: `/kaggle/input/playground-series-s5e9/`\n",
    "\n",
    " What you get:\n",
    " - Single **CFG** to tweak seeds, CV, LightGBM params, early stopping\n",
    " - Efficient CV with **OOF predictions** and **feature importance**\n",
    " - Lightweight OOF diagnostics (scatter, residuals, decile errors, calibration)\n",
    " - Final model fit on full train and **/kaggle/working/submit.csv**\n",
    "\n",
    "# Notes from EDA:\n",
    " - Features are all numeric and mostly in [0,1], plus `AudioLoudness` (negative) and `TrackDurationMs` (large scale).\n",
    " - Univariate correlations are tiny → interactions/nonlinearities matter; LGBM is a good first pick.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bdea41c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:13:15.674793Z",
     "iopub.status.busy": "2025-09-03T08:13:15.674483Z",
     "iopub.status.idle": "2025-09-03T08:13:25.717793Z",
     "shell.execute_reply": "2025-09-03T08:13:25.716533Z"
    },
    "papermill": {
     "duration": 10.049618,
     "end_time": "2025-09-03T08:13:25.719839",
     "exception": false,
     "start_time": "2025-09-03T08:13:15.670221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"seed\": 42,\n",
      "  \"seeds\": [\n",
      "    42\n",
      "  ],\n",
      "  \"cv_splits\": 3,\n",
      "  \"stratify\": true,\n",
      "  \"stratify_bins\": 20,\n",
      "  \"num_boost_round\": 50000,\n",
      "  \"early_stopping\": 10000,\n",
      "  \"use_isotonic\": true,\n",
      "  \"isotonic_sample\": 200000,\n",
      "  \"clip_pred\": true,\n",
      "  \"data_dir\": \"/kaggle/input/playground-series-s5e9/\",\n",
      "  \"id_col\": \"id\",\n",
      "  \"target_col\": \"BeatsPerMinute\"\n",
      "}\n",
      "LGB params: {'objective': 'regression', 'metric': 'rmse', 'learning_rate': 0.001, 'num_leaves': 63, 'min_data_in_leaf': 200, 'feature_fraction': 0.9, 'bagging_fraction': 0.8, 'bagging_freq': 1, 'lambda_l2': 2.0, 'max_depth': -1, 'verbosity': -1, 'force_row_wise': True, 'extra_trees': False, 'seed': 42, 'bagging_seed': 42, 'feature_fraction_seed': 42, 'max_bin': 255, 'n_jobs': -1}\n"
     ]
    }
   ],
   "source": [
    "# 1) IMPORTS & CONFIG\n",
    "import os, json, warnings\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "sns.set_theme(context=\"notebook\", style=\"whitegrid\")\n",
    "pd.set_option(\"display.float_format\", lambda x: f\"{x:,.6f}\")\n",
    "\n",
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import KFold, StratifiedKFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.isotonic import IsotonicRegression\n",
    "\n",
    "# -----------------------------\n",
    "# CONFIG (tweak here)\n",
    "# -----------------------------\n",
    "CFG = dict(\n",
    "    seed=42,\n",
    "    seeds=[42],             # multi-seed ensembling if you add more seeds\n",
    "    cv_splits=3,            # KFold splits\n",
    "    stratify=True,         # use StratifiedKFold on binned target (fast) — usually off for speed\n",
    "    stratify_bins=20,       # only used if stratify=True\n",
    "    num_boost_round=50000,   # upper bound; early stopping will cut it\n",
    "    early_stopping=10000,\n",
    "    use_isotonic=True,     # optional OOF-based calibration (applied to test); keep False for speed\n",
    "    isotonic_sample=200_000,# if isotonic=True, cap fit size\n",
    "    clip_pred=True,         # clip preds to [train_min, train_max]\n",
    "    data_dir=\"/kaggle/input/playground-series-s5e9/\",\n",
    "    id_col=\"id\",\n",
    "    target_col=\"BeatsPerMinute\",\n",
    "    # LightGBM core params (safe, regularized-ish)\n",
    "    lgb_params=dict(\n",
    "        objective=\"regression\",\n",
    "        metric=\"rmse\",\n",
    "        learning_rate=0.001,\n",
    "        num_leaves=63,\n",
    "        min_data_in_leaf=200,\n",
    "        feature_fraction=0.9,\n",
    "        bagging_fraction=0.8,\n",
    "        bagging_freq=1,\n",
    "        lambda_l2=2.0,\n",
    "        max_depth=-1,\n",
    "        verbosity=-1,\n",
    "        force_row_wise=True,\n",
    "        extra_trees=False,\n",
    "        seed=42,\n",
    "        bagging_seed=42,\n",
    "        feature_fraction_seed=42,\n",
    "        max_bin=255,\n",
    "        n_jobs=-1,\n",
    "    ),\n",
    ")\n",
    "\n",
    "def set_seed(s=42):\n",
    "    np.random.seed(s)\n",
    "\n",
    "set_seed(CFG[\"seed\"])\n",
    "\n",
    "print(json.dumps({k: v for k, v in CFG.items() if k != \"lgb_params\"}, indent=2))\n",
    "print(\"LGB params:\", CFG[\"lgb_params\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ef74ae6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:13:25.728246Z",
     "iopub.status.busy": "2025-09-03T08:13:25.727635Z",
     "iopub.status.idle": "2025-09-03T08:13:27.767516Z",
     "shell.execute_reply": "2025-09-03T08:13:27.766443Z"
    },
    "papermill": {
     "duration": 2.04567,
     "end_time": "2025-09-03T08:13:27.769015",
     "exception": false,
     "start_time": "2025-09-03T08:13:25.723345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numeric features: ['RhythmScore', 'AudioLoudness', 'VocalContent', 'AcousticQuality', 'InstrumentalScore', 'LivePerformanceLikelihood', 'MoodScore', 'TrackDurationMs', 'Energy']\n",
      "BPM range: [46.718, 206.037]\n",
      "Shapes: (524164, 9) (174722, 9)\n"
     ]
    }
   ],
   "source": [
    "# 2) LOAD DATA & FEATURES\n",
    "DATA_DIR = CFG[\"data_dir\"]\n",
    "TRAIN = os.path.join(DATA_DIR, \"train.csv\")\n",
    "TEST  = os.path.join(DATA_DIR, \"test.csv\")\n",
    "SUB_S = os.path.join(DATA_DIR, \"sample_submission.csv\")\n",
    "\n",
    "train = pd.read_csv(TRAIN)\n",
    "test  = pd.read_csv(TEST)\n",
    "sub   = pd.read_csv(SUB_S)\n",
    "\n",
    "TARGET = CFG[\"target_col\"]\n",
    "ID_COL = CFG[\"id_col\"]\n",
    "\n",
    "assert TARGET in train.columns and ID_COL in train.columns and ID_COL in test.columns\n",
    "assert set(test.columns) == (set(train.columns) - {TARGET})\n",
    "\n",
    "# Numeric feature list (exclude ID & target)\n",
    "numeric_cols = [c for c in train.columns\n",
    "                if c not in [TARGET, ID_COL] and pd.api.types.is_numeric_dtype(train[c])]\n",
    "print(\"Numeric features:\", numeric_cols)\n",
    "\n",
    "X = train[numeric_cols].astype(\"float32\")\n",
    "y = train[TARGET].astype(\"float32\").values\n",
    "X_test = test[numeric_cols].astype(\"float32\")\n",
    "\n",
    "bpm_min, bpm_max = float(train[TARGET].min()), float(train[TARGET].max())\n",
    "print(f\"BPM range: [{bpm_min:.3f}, {bpm_max:.3f}]\")\n",
    "print(\"Shapes:\", X.shape, X_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b806cf69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:13:27.777365Z",
     "iopub.status.busy": "2025-09-03T08:13:27.777039Z",
     "iopub.status.idle": "2025-09-03T08:13:27.987488Z",
     "shell.execute_reply": "2025-09-03T08:13:27.986424Z"
    },
    "papermill": {
     "duration": 0.216311,
     "end_time": "2025-09-03T08:13:27.989045",
     "exception": false,
     "start_time": "2025-09-03T08:13:27.772734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold sizes: [174722, 174721, 174721]\n"
     ]
    }
   ],
   "source": [
    "# 3) CV SPLITS\n",
    "def make_splits(y, n_splits=3, stratify=False, bins=20, seed=42):\n",
    "    if stratify:\n",
    "        # Bin target for stratification\n",
    "        yb = pd.qcut(y, q=bins, duplicates=\"drop\").codes\n",
    "        skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)\n",
    "        return list(skf.split(np.arange(len(y)), yb))\n",
    "    else:\n",
    "        kf = KFold(n_splits=n_splits, shuffle=True, random_state=seed)\n",
    "        return list(kf.split(np.arange(len(y))))\n",
    "\n",
    "splits = make_splits(y, CFG[\"cv_splits\"], CFG[\"stratify\"], CFG[\"stratify_bins\"], CFG[\"seed\"])\n",
    "print(\"Fold sizes:\", [len(va) for _, va in splits])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1f2ccdb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:13:27.997951Z",
     "iopub.status.busy": "2025-09-03T08:13:27.997033Z",
     "iopub.status.idle": "2025-09-03T08:25:27.322002Z",
     "shell.execute_reply": "2025-09-03T08:25:27.320960Z"
    },
    "papermill": {
     "duration": 719.330835,
     "end_time": "2025-09-03T08:25:27.323524",
     "exception": false,
     "start_time": "2025-09-03T08:13:27.992689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[seed 42] fold 1: RMSE=26.4711, best_iter=1756\n",
      "[seed 42] fold 2: RMSE=26.4525, best_iter=1680\n",
      "[seed 42] fold 3: RMSE=26.4537, best_iter=2236\n",
      "\n",
      "CV summary:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seed</th>\n",
       "      <th>fold</th>\n",
       "      <th>best_iter</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>1756</td>\n",
       "      <td>26.471127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>1680</td>\n",
       "      <td>26.452477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>2236</td>\n",
       "      <td>26.453669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   seed  fold  best_iter      rmse\n",
       "0    42     1       1756 26.471127\n",
       "1    42     2       1680 26.452477\n",
       "2    42     3       2236 26.453669"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "OOF RMSE (uncalibrated): 26.4591\n"
     ]
    }
   ],
   "source": [
    "# 4) TRAIN / OOF / TEST (LightGBM)\n",
    "set_seed(CFG[\"seed\"])\n",
    "\n",
    "oof_pred = np.zeros(len(X), dtype=\"float32\")\n",
    "test_preds_seeds = []\n",
    "fold_summaries = []\n",
    "feat_imps = []\n",
    "\n",
    "for seed in CFG[\"seeds\"]:\n",
    "    params = CFG[\"lgb_params\"].copy()\n",
    "    params.update(seed=seed, bagging_seed=seed, feature_fraction_seed=seed)\n",
    "\n",
    "    fold_rmse = []\n",
    "    best_iters = []\n",
    "\n",
    "    for fold, (tr_idx, va_idx) in enumerate(splits, 1):\n",
    "        X_tr, y_tr = X.iloc[tr_idx], y[tr_idx]\n",
    "        X_va, y_va = X.iloc[va_idx], y[va_idx]\n",
    "\n",
    "        d_tr = lgb.Dataset(X_tr, label=y_tr, free_raw_data=False)\n",
    "        d_va = lgb.Dataset(X_va, label=y_va, free_raw_data=False)\n",
    "\n",
    "        model = lgb.train(\n",
    "            params, d_tr,\n",
    "            num_boost_round=CFG[\"num_boost_round\"],\n",
    "            valid_sets=[d_tr, d_va],\n",
    "            valid_names=[\"train\",\"valid\"],\n",
    "            callbacks=[lgb.early_stopping(CFG[\"early_stopping\"], verbose=False)]\n",
    "        )\n",
    "        best_iters.append(model.best_iteration)\n",
    "\n",
    "        pred_va = model.predict(X_va, num_iteration=model.best_iteration)\n",
    "        oof_pred[va_idx] += pred_va.astype(\"float32\") / len(CFG[\"seeds\"])\n",
    "\n",
    "        rmse_fold = float(np.sqrt(mean_squared_error(y_va, pred_va)))\n",
    "        fold_rmse.append(rmse_fold)\n",
    "\n",
    "        # FI\n",
    "        fi = pd.DataFrame({\n",
    "            \"feature\": numeric_cols,\n",
    "            \"gain\": model.feature_importance(importance_type=\"gain\"),\n",
    "            \"split\": model.feature_importance(importance_type=\"split\"),\n",
    "            \"fold\": fold,\n",
    "            \"seed\": seed\n",
    "        })\n",
    "        feat_imps.append(fi)\n",
    "\n",
    "        fold_summaries.append(dict(seed=seed, fold=fold, best_iter=model.best_iteration, rmse=rmse_fold))\n",
    "        print(f\"[seed {seed}] fold {fold}: RMSE={rmse_fold:.4f}, best_iter={model.best_iteration}\")\n",
    "\n",
    "    # Train final model for this seed with median best_iter\n",
    "    final_iters = int(np.median(best_iters))\n",
    "    d_full = lgb.Dataset(X, label=y, free_raw_data=False)\n",
    "    final_model = lgb.train(params, d_full, num_boost_round=final_iters)\n",
    "\n",
    "    pred_test = final_model.predict(X_test, num_iteration=final_iters).astype(\"float32\")\n",
    "    test_preds_seeds.append(pred_test)\n",
    "\n",
    "cv_df = pd.DataFrame(fold_summaries)\n",
    "print(\"\\nCV summary:\")\n",
    "display(cv_df)\n",
    "\n",
    "oof_rmse = float(np.sqrt(mean_squared_error(y, oof_pred)))\n",
    "print(f\"\\nOOF RMSE (uncalibrated): {oof_rmse:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad9a4151",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:27.332095Z",
     "iopub.status.busy": "2025-09-03T08:25:27.331816Z",
     "iopub.status.idle": "2025-09-03T08:25:27.454058Z",
     "shell.execute_reply": "2025-09-03T08:25:27.452806Z"
    },
    "papermill": {
     "duration": 0.128276,
     "end_time": "2025-09-03T08:25:27.455560",
     "exception": false,
     "start_time": "2025-09-03T08:25:27.327284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OOF RMSE (isotonic): 26.4573  Δ=-0.0018\n"
     ]
    }
   ],
   "source": [
    "# 5) OPTIONAL: ISOTONIC CALIBRATION (OOF-based), then apply to test\n",
    "#    Keep OFF by default — this can be slow on 500k rows; we subsample if needed.\n",
    "if CFG[\"use_isotonic\"]:\n",
    "    iso = IsotonicRegression(out_of_bounds=\"clip\")\n",
    "    if len(oof_pred) > CFG[\"isotonic_sample\"]:\n",
    "        idx = np.random.RandomState(CFG[\"seed\"]).choice(len(oof_pred), CFG[\"isotonic_sample\"], replace=False)\n",
    "        iso.fit(oof_pred[idx], y[idx])\n",
    "    else:\n",
    "        iso.fit(oof_pred, y)\n",
    "    oof_cal = iso.predict(oof_pred)\n",
    "    oof_rmse_cal = float(np.sqrt(mean_squared_error(y, oof_cal)))\n",
    "    print(f\"OOF RMSE (isotonic): {oof_rmse_cal:.4f}  Δ={oof_rmse_cal - oof_rmse:+.4f}\")\n",
    "else:\n",
    "    oof_cal = oof_pred.copy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "983eb20f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:27.465823Z",
     "iopub.status.busy": "2025-09-03T08:25:27.465515Z",
     "iopub.status.idle": "2025-09-03T08:25:27.585223Z",
     "shell.execute_reply": "2025-09-03T08:25:27.584370Z"
    },
    "papermill": {
     "duration": 0.126466,
     "end_time": "2025-09-03T08:25:27.586914",
     "exception": false,
     "start_time": "2025-09-03T08:25:27.460448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OOF RMSE (isotonic): 26.4573  Δ=-0.0018\n"
     ]
    }
   ],
   "source": [
    "# 5) OPTIONAL: ISOTONIC CALIBRATION (OOF-based), then apply to test\n",
    "#    Keep OFF by default — this can be slow on 500k rows; we subsample if needed.\n",
    "if CFG[\"use_isotonic\"]:\n",
    "    iso = IsotonicRegression(out_of_bounds=\"clip\")\n",
    "    if len(oof_pred) > CFG[\"isotonic_sample\"]:\n",
    "        idx = np.random.RandomState(CFG[\"seed\"]).choice(len(oof_pred), CFG[\"isotonic_sample\"], replace=False)\n",
    "        iso.fit(oof_pred[idx], y[idx])\n",
    "    else:\n",
    "        iso.fit(oof_pred, y)\n",
    "    oof_cal = iso.predict(oof_pred)\n",
    "    oof_rmse_cal = float(np.sqrt(mean_squared_error(y, oof_cal)))\n",
    "    print(f\"OOF RMSE (isotonic): {oof_rmse_cal:.4f}  Δ={oof_rmse_cal - oof_rmse:+.4f}\")\n",
    "else:\n",
    "    oof_cal = oof_pred.copy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "25d7211f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:27.597668Z",
     "iopub.status.busy": "2025-09-03T08:25:27.597226Z",
     "iopub.status.idle": "2025-09-03T08:25:28.771290Z",
     "shell.execute_reply": "2025-09-03T08:25:28.770399Z"
    },
    "papermill": {
     "duration": 1.18109,
     "end_time": "2025-09-03T08:25:28.772871",
     "exception": false,
     "start_time": "2025-09-03T08:25:27.591781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OOF RMSE (reported): 26.457298278808594\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(46.717000000000006, 84.91]</th>\n",
       "      <td>46.589371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(84.91, 96.495]</th>\n",
       "      <td>28.000124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(96.495, 104.895]</th>\n",
       "      <td>18.221151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(104.895, 111.928]</th>\n",
       "      <td>10.738543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(111.928, 118.748]</th>\n",
       "      <td>4.152586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(118.748, 125.578]</th>\n",
       "      <td>3.884009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(125.578, 132.709]</th>\n",
       "      <td>10.295100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(132.709, 141.411]</th>\n",
       "      <td>18.027363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(141.411, 153.519]</th>\n",
       "      <td>28.076183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(153.519, 206.037]</th>\n",
       "      <td>48.440632</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 rmse\n",
       "q                                    \n",
       "(46.717000000000006, 84.91] 46.589371\n",
       "(84.91, 96.495]             28.000124\n",
       "(96.495, 104.895]           18.221151\n",
       "(104.895, 111.928]          10.738543\n",
       "(111.928, 118.748]           4.152586\n",
       "(118.748, 125.578]           3.884009\n",
       "(125.578, 132.709]          10.295100\n",
       "(132.709, 141.411]          18.027363\n",
       "(141.411, 153.519]          28.076183\n",
       "(153.519, 206.037]          48.440632"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 6) OOF DIAGNOSTICS (FAST)\n",
    "PLOT_SAMPLE = min(60_000, len(X))  # sampling for plotting speed\n",
    "\n",
    "idx_plot = np.random.RandomState(CFG[\"seed\"]).choice(len(X), PLOT_SAMPLE, replace=False)\n",
    "y_s   = y[idx_plot]\n",
    "oof_s = oof_cal[idx_plot]\n",
    "res_s = y_s - oof_s\n",
    "\n",
    "def rmse(a, b): return float(np.sqrt(mean_squared_error(a, b)))\n",
    "\n",
    "print(\"OOF RMSE (reported):\", rmse(y, oof_cal))\n",
    "\n",
    "# Scatter: pred vs true\n",
    "fig, ax = plt.subplots(figsize=(6,6))\n",
    "ax.scatter(oof_s, y_s, s=5, alpha=0.3, rasterized=True)\n",
    "ax.set_xlabel(\"OOF prediction\")\n",
    "ax.set_ylabel(\"True BPM\")\n",
    "ax.set_title(\"OOF: prediction vs truth (sample)\")\n",
    "plt.show()\n",
    "\n",
    "# Residual histogram\n",
    "fig, ax = plt.subplots(figsize=(7,4))\n",
    "ax.hist(res_s, bins=80, alpha=0.8)\n",
    "ax.set_title(\"Residuals (y - ŷ) — sample\")\n",
    "plt.show()\n",
    "\n",
    "# Error by true-deciles\n",
    "q = pd.qcut(y, q=10, duplicates=\"drop\")\n",
    "dec_df = pd.DataFrame({\"y\": y, \"oof\": oof_cal, \"q\": q})\n",
    "err_by_dec = dec_df.groupby(\"q\").apply(lambda d: rmse(d[\"y\"], d[\"oof\"]))\n",
    "display(err_by_dec.to_frame(\"rmse\"))\n",
    "\n",
    "# Simple calibration curve (bin by ŷ, compare mean y vs mean ŷ)\n",
    "qhat = pd.qcut(oof_cal, q=20, duplicates=\"drop\")\n",
    "cal_df = pd.DataFrame({\"y\": y, \"oof\": oof_cal, \"bin\": qhat}).groupby(\"bin\").agg(y_mean=(\"y\",\"mean\"), yhat_mean=(\"oof\",\"mean\"))\n",
    "fig, ax = plt.subplots(figsize=(6,5))\n",
    "ax.plot(cal_df[\"yhat_mean\"], cal_df[\"y_mean\"], marker=\"o\", linestyle=\"-\")\n",
    "ax.plot([cal_df.values.min(), cal_df.values.max()], [cal_df.values.min(), cal_df.values.max()], \"--\")\n",
    "ax.set_xlabel(\"Mean ŷ (bin)\")\n",
    "ax.set_ylabel(\"Mean y (bin)\")\n",
    "ax.set_title(\"Calibration (bin-mean y vs ŷ)\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0e83623f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:28.787425Z",
     "iopub.status.busy": "2025-09-03T08:25:28.787040Z",
     "iopub.status.idle": "2025-09-03T08:25:29.055370Z",
     "shell.execute_reply": "2025-09-03T08:25:29.054324Z"
    },
    "papermill": {
     "duration": 0.277304,
     "end_time": "2025-09-03T08:25:29.057169",
     "exception": false,
     "start_time": "2025-09-03T08:25:28.779865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>gain</th>\n",
       "      <th>split</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MoodScore</td>\n",
       "      <td>88,379,157.425334</td>\n",
       "      <td>12,968.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TrackDurationMs</td>\n",
       "      <td>88,272,314.261759</td>\n",
       "      <td>15,437.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RhythmScore</td>\n",
       "      <td>81,829,210.102132</td>\n",
       "      <td>14,445.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Energy</td>\n",
       "      <td>81,192,126.200521</td>\n",
       "      <td>14,648.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VocalContent</td>\n",
       "      <td>67,515,602.281169</td>\n",
       "      <td>12,501.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AudioLoudness</td>\n",
       "      <td>66,634,324.081095</td>\n",
       "      <td>12,730.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LivePerformanceLikelihood</td>\n",
       "      <td>63,085,633.377441</td>\n",
       "      <td>11,982.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AcousticQuality</td>\n",
       "      <td>61,101,947.752319</td>\n",
       "      <td>11,537.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>InstrumentalScore</td>\n",
       "      <td>57,264,361.865967</td>\n",
       "      <td>10,970.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feature              gain         split\n",
       "0                  MoodScore 88,379,157.425334 12,968.333333\n",
       "1            TrackDurationMs 88,272,314.261759 15,437.666667\n",
       "2                RhythmScore 81,829,210.102132 14,445.666667\n",
       "3                     Energy 81,192,126.200521 14,648.666667\n",
       "4               VocalContent 67,515,602.281169 12,501.333333\n",
       "5              AudioLoudness 66,634,324.081095 12,730.000000\n",
       "6  LivePerformanceLikelihood 63,085,633.377441 11,982.333333\n",
       "7            AcousticQuality 61,101,947.752319 11,537.000000\n",
       "8          InstrumentalScore 57,264,361.865967 10,970.333333"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 700x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 7) FEATURE IMPORTANCE (average over folds/seeds)\n",
    "fi_df = (pd.concat(feat_imps, ignore_index=True)\n",
    "           .groupby(\"feature\")[[\"gain\",\"split\"]].mean()\n",
    "           .sort_values(\"gain\", ascending=False)\n",
    "           .reset_index())\n",
    "display(fi_df)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(7, max(3, 0.4*len(fi_df))))\n",
    "sns.barplot(data=fi_df, x=\"gain\", y=\"feature\", ax=ax)\n",
    "ax.set_title(\"LightGBM Feature Importance (gain)\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e08f5ba7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:29.073720Z",
     "iopub.status.busy": "2025-09-03T08:25:29.073223Z",
     "iopub.status.idle": "2025-09-03T08:25:29.553163Z",
     "shell.execute_reply": "2025-09-03T08:25:29.552263Z"
    },
    "papermill": {
     "duration": 0.489849,
     "end_time": "2025-09-03T08:25:29.554688",
     "exception": false,
     "start_time": "2025-09-03T08:25:29.064839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved: /kaggle/working/submit9.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>BeatsPerMinute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>524164</td>\n",
       "      <td>118.960205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>524165</td>\n",
       "      <td>118.784637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>524166</td>\n",
       "      <td>119.241478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524167</td>\n",
       "      <td>119.214119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>524168</td>\n",
       "      <td>119.313164</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  BeatsPerMinute\n",
       "0  524164      118.960205\n",
       "1  524165      118.784637\n",
       "2  524166      119.241478\n",
       "3  524167      119.214119\n",
       "4  524168      119.313164"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 8) BUILD TEST PREDICTIONS, CLIP, SAVE submit.csv\n",
    "test_pred = np.mean(test_preds_seeds, axis=0).astype(\"float32\")\n",
    "\n",
    "if CFG[\"use_isotonic\"]:\n",
    "    # apply the same iso mapping\n",
    "    test_pred = IsotonicRegression(out_of_bounds=\"clip\").fit(oof_pred, y).predict(test_pred)\n",
    "\n",
    "if CFG[\"clip_pred\"]:\n",
    "    test_pred = np.clip(test_pred, bpm_min, bpm_max)\n",
    "\n",
    "submit = pd.DataFrame({CFG[\"id_col\"]: test[ID_COL].values, CFG[\"target_col\"]: test_pred})\n",
    "OUT = \"/kaggle/working/submit9.csv\"\n",
    "submit.to_csv(OUT, index=False)\n",
    "print(\"Saved:\", OUT)\n",
    "display(submit.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "176218c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-03T08:25:29.572058Z",
     "iopub.status.busy": "2025-09-03T08:25:29.571710Z",
     "iopub.status.idle": "2025-09-03T08:25:30.778417Z",
     "shell.execute_reply": "2025-09-03T08:25:30.777469Z"
    },
    "papermill": {
     "duration": 1.217493,
     "end_time": "2025-09-03T08:25:30.779940",
     "exception": false,
     "start_time": "2025-09-03T08:25:29.562447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OOF RMSE by stage (lower is better):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>oof_rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>isotonic_calibrated</td>\n",
       "      <td>26.457298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>final_used</td>\n",
       "      <td>26.457298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>lgbm_base</td>\n",
       "      <td>26.459093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 stage  oof_rmse\n",
       "0  isotonic_calibrated 26.457298\n",
       "1           final_used 26.457298\n",
       "2            lgbm_base 26.459093"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "RMSE by TRUE deciles — base vs final:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rmse_base</th>\n",
       "      <th>rmse_final</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(46.717000000000006, 84.91]</th>\n",
       "      <td>46.661903</td>\n",
       "      <td>46.589371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(84.91, 96.495]</th>\n",
       "      <td>28.066637</td>\n",
       "      <td>28.000124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(96.495, 104.895]</th>\n",
       "      <td>18.281773</td>\n",
       "      <td>18.221151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(104.895, 111.928]</th>\n",
       "      <td>10.798104</td>\n",
       "      <td>10.738543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(111.928, 118.748]</th>\n",
       "      <td>4.183245</td>\n",
       "      <td>4.152586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(118.748, 125.578]</th>\n",
       "      <td>3.805834</td>\n",
       "      <td>3.884009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(125.578, 132.709]</th>\n",
       "      <td>10.225267</td>\n",
       "      <td>10.295100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(132.709, 141.411]</th>\n",
       "      <td>17.963312</td>\n",
       "      <td>18.027363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(141.411, 153.519]</th>\n",
       "      <td>28.015228</td>\n",
       "      <td>28.076183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(153.519, 206.037]</th>\n",
       "      <td>48.383396</td>\n",
       "      <td>48.440632</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             rmse_base  rmse_final\n",
       "bin                                               \n",
       "(46.717000000000006, 84.91]  46.661903   46.589371\n",
       "(84.91, 96.495]              28.066637   28.000124\n",
       "(96.495, 104.895]            18.281773   18.221151\n",
       "(104.895, 111.928]           10.798104   10.738543\n",
       "(111.928, 118.748]            4.183245    4.152586\n",
       "(118.748, 125.578]            3.805834    3.884009\n",
       "(125.578, 132.709]           10.225267   10.295100\n",
       "(132.709, 141.411]           17.963312   18.027363\n",
       "(141.411, 153.519]           28.015228   28.076183\n",
       "(153.519, 206.037]           48.383396   48.440632"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE by PRED deciles (final):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(109.764, 118.538]</th>\n",
       "      <td>26.549204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(118.538, 118.879]</th>\n",
       "      <td>26.538155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(118.879, 118.894]</th>\n",
       "      <td>26.527309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(118.894, 119.022]</th>\n",
       "      <td>26.430338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(119.022, 119.057]</th>\n",
       "      <td>26.211357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(119.057, 119.176]</th>\n",
       "      <td>26.421589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(119.176, 165.732]</th>\n",
       "      <td>25.410360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        rmse\n",
       "bin                         \n",
       "(109.764, 118.538] 26.549204\n",
       "(118.538, 118.879] 26.538155\n",
       "(118.879, 118.894] 26.527309\n",
       "(118.894, 119.022] 26.430338\n",
       "(119.022, 119.057] 26.211357\n",
       "(119.057, 119.176] 26.421589\n",
       "(119.176, 165.732] 25.410360"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calibration: slope ≈ 0.970 (ideal ≈ 1.0)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Residual summary (final):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count   524,164.000000\n",
       "mean          0.063033\n",
       "std          26.454657\n",
       "min         -76.452431\n",
       "25%         -17.937012\n",
       "50%          -0.226143\n",
       "75%          17.731522\n",
       "max          87.499023\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Residual ↔ feature correlation (top features):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>pearson_resid_corr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TrackDurationMs</td>\n",
       "      <td>0.003185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RhythmScore</td>\n",
       "      <td>0.002182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VocalContent</td>\n",
       "      <td>0.001981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AudioLoudness</td>\n",
       "      <td>-0.001727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LivePerformanceLikelihood</td>\n",
       "      <td>0.001197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MoodScore</td>\n",
       "      <td>0.001121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Energy</td>\n",
       "      <td>-0.001031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AcousticQuality</td>\n",
       "      <td>-0.000880</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feature  pearson_resid_corr\n",
       "1            TrackDurationMs            0.003185\n",
       "2                RhythmScore            0.002182\n",
       "4               VocalContent            0.001981\n",
       "5              AudioLoudness           -0.001727\n",
       "6  LivePerformanceLikelihood            0.001197\n",
       "0                  MoodScore            0.001121\n",
       "3                     Energy           -0.001031\n",
       "7            AcousticQuality           -0.000880"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "RMSE by TrackDurationMs deciles (final):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(63972.999, 161616.372]</th>\n",
       "      <td>26.713713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(161616.372, 182875.612]</th>\n",
       "      <td>26.282957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(182875.612, 217096.516]</th>\n",
       "      <td>26.640734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(217096.516, 230278.406]</th>\n",
       "      <td>26.471470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(230278.406, 243684.062]</th>\n",
       "      <td>26.494097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(243684.062, 258922.894]</th>\n",
       "      <td>26.323082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(258922.894, 273093.397]</th>\n",
       "      <td>26.330627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(273093.397, 291230.338]</th>\n",
       "      <td>26.363914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(291230.338, 316866.784]</th>\n",
       "      <td>26.486525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(316866.784, 464723.219]</th>\n",
       "      <td>26.462532</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              rmse\n",
       "bin                               \n",
       "(63972.999, 161616.372]  26.713713\n",
       "(161616.372, 182875.612] 26.282957\n",
       "(182875.612, 217096.516] 26.640734\n",
       "(217096.516, 230278.406] 26.471470\n",
       "(230278.406, 243684.062] 26.494097\n",
       "(243684.062, 258922.894] 26.323082\n",
       "(258922.894, 273093.397] 26.330627\n",
       "(273093.397, 291230.338] 26.363914\n",
       "(291230.338, 316866.784] 26.486525\n",
       "(316866.784, 464723.219] 26.462532"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "RMSE by Energy deciles (final):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bin</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(-0.0009333, 0.0889]</th>\n",
       "      <td>26.080479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.0889, 0.189]</th>\n",
       "      <td>26.116535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.189, 0.298]</th>\n",
       "      <td>26.362469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.298, 0.404]</th>\n",
       "      <td>26.508869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.404, 0.512]</th>\n",
       "      <td>26.434019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.512, 0.609]</th>\n",
       "      <td>26.558308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.609, 0.705]</th>\n",
       "      <td>26.657896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.705, 0.803]</th>\n",
       "      <td>26.645685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.803, 0.899]</th>\n",
       "      <td>26.445871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(0.899, 1.0]</th>\n",
       "      <td>26.755320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          rmse\n",
       "bin                           \n",
       "(-0.0009333, 0.0889] 26.080479\n",
       "(0.0889, 0.189]      26.116535\n",
       "(0.189, 0.298]       26.362469\n",
       "(0.298, 0.404]       26.508869\n",
       "(0.404, 0.512]       26.434019\n",
       "(0.512, 0.609]       26.558308\n",
       "(0.609, 0.705]       26.657896\n",
       "(0.705, 0.803]       26.645685\n",
       "(0.803, 0.899]       26.445871\n",
       "(0.899, 1.0]         26.755320"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# -----------------------------\n",
    "# Diagnostics (robust to naming differences)\n",
    "# -----------------------------\n",
    "import numpy as np, pandas as pd, matplotlib.pyplot as plt\n",
    "from collections import OrderedDict\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def rmse(a, b): \n",
    "    return float(np.sqrt(mean_squared_error(a, b)))\n",
    "\n",
    "def pick_first_existing(names, globals_dict):\n",
    "    \"\"\"Return first var that exists in globals; otherwise None.\"\"\"\n",
    "    for n in names:\n",
    "        if n in globals_dict and globals_dict[n] is not None:\n",
    "            return globals_dict[n]\n",
    "    return None\n",
    "\n",
    "# ---- reconstruct core pieces safely ----\n",
    "# y (true target)\n",
    "y_vec = pick_first_existing([\"y\"], globals())\n",
    "if y_vec is None and \"train\" in globals():\n",
    "    # fall back to reading from train\n",
    "    tgt = \"BeatsPerMinute\"\n",
    "    if tgt in train.columns:\n",
    "        y_vec = train[tgt].to_numpy()\n",
    "if y_vec is None:\n",
    "    raise RuntimeError(\"Could not find y (true target). Make sure training ran and 'y' exists.\")\n",
    "\n",
    "# base OOF (from LGBM)\n",
    "oof_base = pick_first_existing([\"oof_main\", \"oof_pred\", \"oof_all\"], globals())\n",
    "# final OOF used (post everything)\n",
    "oof_used_final = pick_first_existing([\"oof_used\", \"oof_final\", \"oof_cal\", \"oof_blend\"], globals())\n",
    "\n",
    "# optional components\n",
    "oof_ridge = pick_first_existing([\"oof_ridge\"], globals())\n",
    "blend_weights = pick_first_existing([\"blend_weights\"], globals())\n",
    "oof_rb = pick_first_existing([\"oof_rb\"], globals())\n",
    "fi_df_local = pick_first_existing([\"fi_df\"], globals())\n",
    "\n",
    "# If nothing at all was found for base OOF, exit politely.\n",
    "if oof_base is None and oof_used_final is None:\n",
    "    raise RuntimeError(\"No OOF arrays found (oof_main/oof_pred/oof_all/oof_used). Ensure training cells ran successfully.\")\n",
    "\n",
    "# pick or define final used\n",
    "if oof_used_final is None:\n",
    "    oof_used_final = oof_base.copy()\n",
    "\n",
    "# ---- build stage dictionary if present ----\n",
    "stages = OrderedDict()\n",
    "if oof_base is not None:\n",
    "    stages[\"lgbm_base\"] = oof_base.copy()\n",
    "\n",
    "# ridge model oof\n",
    "if oof_ridge is not None:\n",
    "    stages[\"ridge\"] = oof_ridge.copy()\n",
    "\n",
    "# blend if we can form it\n",
    "if blend_weights is not None and oof_base is not None and oof_ridge is not None:\n",
    "    blend_oof = (blend_weights.get(\"intercept\", 0.0) \n",
    "                 + blend_weights.get(\"w_main\", 1.0) * oof_base\n",
    "                 + blend_weights.get(\"w_ridge\", 0.0) * oof_ridge)\n",
    "    stages[\"blend(LGBM+Ridge)\"] = blend_oof\n",
    "\n",
    "# residual booster\n",
    "if oof_rb is not None:\n",
    "    base_for_rb = stages.get(\"blend(LGBM+Ridge)\", stages.get(\"lgbm_base\", oof_used_final))\n",
    "    stages[\"blend+residual_boost\"] = base_for_rb + oof_rb\n",
    "\n",
    "# isotonic if present\n",
    "if \"oof_cal\" in globals() and globals()[\"oof_cal\"] is not None:\n",
    "    stages[\"isotonic_calibrated\"] = globals()[\"oof_cal\"].copy()\n",
    "\n",
    "# final used\n",
    "stages[\"final_used\"] = oof_used_final.copy()\n",
    "\n",
    "# ---- RMSE by stage ----\n",
    "rmse_rows = [{\"stage\": k, \"oof_rmse\": rmse(y_vec, v)} for k, v in stages.items()]\n",
    "rmse_df = pd.DataFrame(rmse_rows).sort_values(\"oof_rmse\").reset_index(drop=True)\n",
    "print(\"OOF RMSE by stage (lower is better):\")\n",
    "display(rmse_df)\n",
    "\n",
    "# ---- Groupwise errors: by true deciles & by predicted deciles ----\n",
    "def err_by_deciles(y_true, y_pred, q=10, on=\"y\"):\n",
    "    d = pd.DataFrame({\"y\": y_true, \"p\": y_pred})\n",
    "    key = \"y\" if on == \"y\" else \"p\"\n",
    "    d[\"bin\"] = pd.qcut(d[key], q=q, duplicates=\"drop\")\n",
    "    return d.groupby(\"bin\").apply(lambda z: rmse(z[\"y\"], z[\"p\"])).to_frame(\"rmse\")\n",
    "\n",
    "base_name = \"lgbm_base\" if \"lgbm_base\" in stages else \"final_used\"\n",
    "print(\"\\nRMSE by TRUE deciles — base vs final:\")\n",
    "by_true_base = err_by_deciles(y_vec, stages[base_name], q=10, on=\"y\").rename(columns={\"rmse\": \"rmse_base\"})\n",
    "by_true_final = err_by_deciles(y_vec, stages[\"final_used\"], q=10, on=\"y\").rename(columns={\"rmse\": \"rmse_final\"})\n",
    "display(by_true_base.join(by_true_final, how=\"outer\"))\n",
    "\n",
    "print(\"RMSE by PRED deciles (final):\")\n",
    "display(err_by_deciles(y_vec, stages[\"final_used\"], q=10, on=\"p\"))\n",
    "\n",
    "# ---- Calibration curve (bin-mean) and slope ----\n",
    "def calibration_bins(y_true, y_pred, bins=20):\n",
    "    d = pd.DataFrame({\"y\": y_true, \"p\": y_pred})\n",
    "    d[\"bin\"] = pd.qcut(d[\"p\"], q=bins, duplicates=\"drop\")\n",
    "    agg = d.groupby(\"bin\").agg(y_mean=(\"y\",\"mean\"), yhat_mean=(\"p\",\"mean\"), n=(\"y\",\"size\")).reset_index(drop=True)\n",
    "    if len(agg) >= 2:\n",
    "        slope = np.polyfit(agg[\"yhat_mean\"].values, agg[\"y_mean\"].values, 1)[0]\n",
    "    else:\n",
    "        slope = np.nan\n",
    "    return agg, slope\n",
    "\n",
    "cal_df, slope = calibration_bins(y_vec, stages[\"final_used\"], bins=20)\n",
    "print(f\"\\nCalibration: slope ≈ {slope:.3f} (ideal ≈ 1.0)\")\n",
    "fig, ax = plt.subplots(figsize=(6,5))\n",
    "ax.plot(cal_df[\"yhat_mean\"], cal_df[\"y_mean\"], marker=\"o\")\n",
    "mn, mx = cal_df[[\"yhat_mean\",\"y_mean\"]].min().min(), cal_df[[\"yhat_mean\",\"y_mean\"]].max().max()\n",
    "ax.plot([mn, mx], [mn, mx], \"--\", lw=1)\n",
    "ax.set_xlabel(\"Mean ŷ (bin)\")\n",
    "ax.set_ylabel(\"Mean y (bin)\")\n",
    "ax.set_title(\"Calibration curve (final)\")\n",
    "plt.show()\n",
    "\n",
    "# ---- Residuals: summary + hist ----\n",
    "resid = y_vec - stages[\"final_used\"]\n",
    "print(\"Residual summary (final):\")\n",
    "display(pd.Series(resid).describe())\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(7,4))\n",
    "ax.hist(resid, bins=100, alpha=0.9)\n",
    "ax.set_title(\"Residuals (y - ŷ) — final\")\n",
    "plt.show()\n",
    "\n",
    "# ---- Residual ↔ feature correlation (top features if FI exists) ----\n",
    "try:\n",
    "    if fi_df_local is not None:\n",
    "        top_feats = fi_df_local.sort_values(\"gain\", ascending=False)[\"feature\"].head(8).tolist()\n",
    "    else:\n",
    "        top_feats = list(X.columns[:8]) if \"X\" in globals() else []\n",
    "    corr_rows = []\n",
    "    for c in top_feats:\n",
    "        # Find this column in either X_fe or X\n",
    "        if \"X_fe\" in globals() and c in X_fe.columns:\n",
    "            vals = X_fe[c].astype(\"float64\").values\n",
    "        elif \"X\" in globals() and c in X.columns:\n",
    "            vals = X[c].astype(\"float64\").values\n",
    "        else:\n",
    "            continue\n",
    "        r = np.corrcoef(vals, resid.astype(\"float64\"))[0,1]\n",
    "        corr_rows.append({\"feature\": c, \"pearson_resid_corr\": float(r)})\n",
    "    if corr_rows:\n",
    "        corr_df = pd.DataFrame(corr_rows).sort_values(\"pearson_resid_corr\", key=lambda s: s.abs(), ascending=False)\n",
    "        print(\"\\nResidual ↔ feature correlation (top features):\")\n",
    "        display(corr_df)\n",
    "except Exception as e:\n",
    "    print(\"Residual↔feature correlation skipped:\", e)\n",
    "\n",
    "# ---- Optional drilldowns by specific features ----\n",
    "for col in [\"TrackDurationMs\", \"Energy\"]:\n",
    "    cand_df = None\n",
    "    if \"X_fe\" in globals() and col in X_fe.columns:\n",
    "        cand_df = X_fe\n",
    "    elif \"X\" in globals() and col in X.columns:\n",
    "        cand_df = X\n",
    "    if cand_df is not None:\n",
    "        bins = pd.qcut(cand_df[col], q=10, duplicates=\"drop\")\n",
    "        d = pd.DataFrame({\"y\": y_vec, \"oof\": stages[\"final_used\"], \"bin\": bins})\n",
    "        df_rmse = d.groupby(\"bin\").apply(lambda z: rmse(z[\"y\"], z[\"oof\"])).to_frame(\"rmse\")\n",
    "        print(f\"\\nRMSE by {col} deciles (final):\")\n",
    "        display(df_rmse)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adf54c2a",
   "metadata": {
    "papermill": {
     "duration": 0.010188,
     "end_time": "2025-09-03T08:25:30.800731",
     "exception": false,
     "start_time": "2025-09-03T08:25:30.790543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13345277,
     "sourceId": 91720,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 741.988071,
   "end_time": "2025-09-03T08:25:31.933084",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-03T08:13:09.945013",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
