{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98867da6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:13:58.085772Z",
     "iopub.status.busy": "2025-09-04T14:13:58.085382Z",
     "iopub.status.idle": "2025-09-04T14:14:02.085224Z",
     "shell.execute_reply": "2025-09-04T14:14:02.084417Z"
    },
    "papermill": {
     "duration": 4.006028,
     "end_time": "2025-09-04T14:14:02.086890",
     "exception": false,
     "start_time": "2025-09-04T14:13:58.080862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ==============\n",
    "# Imports\n",
    "# ==============\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "import xgboost as xgb\n",
    "\n",
    "pd.set_option(\"display.max_columns\", None)\n",
    "\n",
    "\n",
    "# =========================\n",
    "# CFG: tweak all params here\n",
    "# =========================\n",
    "CFG = {\n",
    "    \"DATA_DIR\": \"/kaggle/input/playground-series-s5e9/\",\n",
    "    \"TRAIN_FILE\": \"train.csv\",\n",
    "    \"TEST_FILE\": \"test.csv\",\n",
    "    \"SAMPLE_SUB_FILE\": \"sample_submission.csv\",\n",
    "    \"TARGET\": \"BeatsPerMinute\",\n",
    "    \"ID_COL\": \"id\",\n",
    "\n",
    "    # split & seed\n",
    "    \"TEST_SIZE\": 0.20,           # 0.2 = 80/20 split\n",
    "    \"RANDOM_STATE\": 42,\n",
    "\n",
    "    # xgboost params (keep simple for now)\n",
    "    \"XGB_PARAMS\": {\n",
    "        \"n_estimators\": 2000,\n",
    "        \"learning_rate\": 0.03,\n",
    "        \"max_depth\": 6,\n",
    "        \"subsample\": 0.9,\n",
    "        \"colsample_bytree\": 0.9,\n",
    "        \"reg_alpha\": 0.0,\n",
    "        \"reg_lambda\": 1.0,\n",
    "        \"random_state\": 42,\n",
    "        \"n_jobs\": -1,\n",
    "        \"tree_method\": \"hist\",     # good default on CPU\n",
    "    },\n",
    "    \"EARLY_STOPPING_ROUNDS\": 100,\n",
    "\n",
    "    # output\n",
    "    \"SUBMISSION_PATH\": \"/kaggle/working/submit_ver_2_1.csv\",\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "584883d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:02.094596Z",
     "iopub.status.busy": "2025-09-04T14:14:02.093771Z",
     "iopub.status.idle": "2025-09-04T14:14:04.275058Z",
     "shell.execute_reply": "2025-09-04T14:14:04.274079Z"
    },
    "papermill": {
     "duration": 2.186262,
     "end_time": "2025-09-04T14:14:04.276502",
     "exception": false,
     "start_time": "2025-09-04T14:14:02.090240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (524164, 11)\n",
      "Test  shape: (174722, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>RhythmScore</th>\n",
       "      <th>AudioLoudness</th>\n",
       "      <th>VocalContent</th>\n",
       "      <th>AcousticQuality</th>\n",
       "      <th>InstrumentalScore</th>\n",
       "      <th>LivePerformanceLikelihood</th>\n",
       "      <th>MoodScore</th>\n",
       "      <th>TrackDurationMs</th>\n",
       "      <th>Energy</th>\n",
       "      <th>BeatsPerMinute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.603610</td>\n",
       "      <td>-7.636942</td>\n",
       "      <td>0.023500</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.051385</td>\n",
       "      <td>0.409866</td>\n",
       "      <td>290715.6450</td>\n",
       "      <td>0.826267</td>\n",
       "      <td>147.53020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.639451</td>\n",
       "      <td>-16.267598</td>\n",
       "      <td>0.071520</td>\n",
       "      <td>0.444929</td>\n",
       "      <td>0.349414</td>\n",
       "      <td>0.170522</td>\n",
       "      <td>0.651010</td>\n",
       "      <td>164519.5174</td>\n",
       "      <td>0.145400</td>\n",
       "      <td>136.15963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.514538</td>\n",
       "      <td>-15.953575</td>\n",
       "      <td>0.110715</td>\n",
       "      <td>0.173699</td>\n",
       "      <td>0.453814</td>\n",
       "      <td>0.029576</td>\n",
       "      <td>0.423865</td>\n",
       "      <td>174495.5667</td>\n",
       "      <td>0.624667</td>\n",
       "      <td>55.31989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.734463</td>\n",
       "      <td>-1.357000</td>\n",
       "      <td>0.052965</td>\n",
       "      <td>0.001651</td>\n",
       "      <td>0.159717</td>\n",
       "      <td>0.086366</td>\n",
       "      <td>0.278745</td>\n",
       "      <td>225567.4651</td>\n",
       "      <td>0.487467</td>\n",
       "      <td>147.91212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.532968</td>\n",
       "      <td>-13.056437</td>\n",
       "      <td>0.023500</td>\n",
       "      <td>0.068687</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.331345</td>\n",
       "      <td>0.477769</td>\n",
       "      <td>213960.6789</td>\n",
       "      <td>0.947333</td>\n",
       "      <td>89.58511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  RhythmScore  AudioLoudness  VocalContent  AcousticQuality  \\\n",
       "0   0     0.603610      -7.636942      0.023500         0.000005   \n",
       "1   1     0.639451     -16.267598      0.071520         0.444929   \n",
       "2   2     0.514538     -15.953575      0.110715         0.173699   \n",
       "3   3     0.734463      -1.357000      0.052965         0.001651   \n",
       "4   4     0.532968     -13.056437      0.023500         0.068687   \n",
       "\n",
       "   InstrumentalScore  LivePerformanceLikelihood  MoodScore  TrackDurationMs  \\\n",
       "0           0.000001                   0.051385   0.409866      290715.6450   \n",
       "1           0.349414                   0.170522   0.651010      164519.5174   \n",
       "2           0.453814                   0.029576   0.423865      174495.5667   \n",
       "3           0.159717                   0.086366   0.278745      225567.4651   \n",
       "4           0.000001                   0.331345   0.477769      213960.6789   \n",
       "\n",
       "     Energy  BeatsPerMinute  \n",
       "0  0.826267       147.53020  \n",
       "1  0.145400       136.15963  \n",
       "2  0.624667        55.31989  \n",
       "3  0.487467       147.91212  \n",
       "4  0.947333        89.58511  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_path = os.path.join(CFG[\"DATA_DIR\"], CFG[\"TRAIN_FILE\"])\n",
    "test_path  = os.path.join(CFG[\"DATA_DIR\"], CFG[\"TEST_FILE\"])\n",
    "\n",
    "train = pd.read_csv(train_path)\n",
    "test  = pd.read_csv(test_path)\n",
    "\n",
    "print(\"Train shape:\", train.shape)\n",
    "print(\"Test  shape:\", test.shape)\n",
    "assert CFG[\"TARGET\"] in train.columns\n",
    "assert CFG[\"ID_COL\"] in train.columns and CFG[\"ID_COL\"] in test.columns\n",
    "\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b308fce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:04.283976Z",
     "iopub.status.busy": "2025-09-04T14:14:04.283655Z",
     "iopub.status.idle": "2025-09-04T14:14:04.360503Z",
     "shell.execute_reply": "2025-09-04T14:14:04.359508Z"
    },
    "papermill": {
     "duration": 0.082301,
     "end_time": "2025-09-04T14:14:04.362009",
     "exception": false,
     "start_time": "2025-09-04T14:14:04.279708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    524164.000000\n",
      "mean        119.034899\n",
      "std          26.468077\n",
      "min          46.718000\n",
      "25%         101.070410\n",
      "50%         118.747660\n",
      "75%         136.686590\n",
      "max         206.037000\n",
      "\n",
      "Missing values (train):\n",
      " id                           0\n",
      "RhythmScore                  0\n",
      "AudioLoudness                0\n",
      "VocalContent                 0\n",
      "AcousticQuality              0\n",
      "InstrumentalScore            0\n",
      "LivePerformanceLikelihood    0\n",
      "MoodScore                    0\n",
      "TrackDurationMs              0\n",
      "Energy                       0\n",
      "BeatsPerMinute               0\n",
      "dtype: int64\n",
      "\n",
      "Missing values (test):\n",
      " id                           0\n",
      "RhythmScore                  0\n",
      "AudioLoudness                0\n",
      "VocalContent                 0\n",
      "AcousticQuality              0\n",
      "InstrumentalScore            0\n",
      "LivePerformanceLikelihood    0\n",
      "MoodScore                    0\n",
      "TrackDurationMs              0\n",
      "Energy                       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "y = train[CFG[\"TARGET\"]].astype(float)\n",
    "print(y.describe().to_string())\n",
    "\n",
    "# missing check\n",
    "print(\"\\nMissing values (train):\\n\", train.isna().sum())\n",
    "print(\"\\nMissing values (test):\\n\", test.isna().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "daeba4a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:04.369421Z",
     "iopub.status.busy": "2025-09-04T14:14:04.369112Z",
     "iopub.status.idle": "2025-09-04T14:14:04.376327Z",
     "shell.execute_reply": "2025-09-04T14:14:04.375445Z"
    },
    "papermill": {
     "duration": 0.012769,
     "end_time": "2025-09-04T14:14:04.377832",
     "exception": false,
     "start_time": "2025-09-04T14:14:04.365063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "BASE_FEATURES = [c for c in train.columns if c not in [CFG[\"ID_COL\"], CFG[\"TARGET\"]]]\n",
    "\n",
    "def add_features(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    out = df.copy()\n",
    "\n",
    "    # 1) log duration (long-tailed)\n",
    "    if \"TrackDurationMs\" in out.columns:\n",
    "        out[\"log_duration\"] = np.log1p(out[\"TrackDurationMs\"].clip(lower=0))\n",
    "\n",
    "    # 2) z-score of AudioLoudness (often ranges negative dB)\n",
    "    if \"AudioLoudness\" in out.columns:\n",
    "        mu = train[\"AudioLoudness\"].mean()\n",
    "        sd = train[\"AudioLoudness\"].std(ddof=0)\n",
    "        out[\"loudness_z\"] = (out[\"AudioLoudness\"] - mu) / (sd if sd > 0 else 1.0)\n",
    "\n",
    "    # 3) simple interaction: RhythmScore × Energy (two strong correlates from EDA)\n",
    "    if set([\"RhythmScore\", \"Energy\"]).issubset(out.columns):\n",
    "        out[\"rhythm_x_energy\"] = out[\"RhythmScore\"] * out[\"Energy\"]\n",
    "\n",
    "    return out\n",
    "\n",
    "# We’ll define progressive feature sets for diagnostics\n",
    "FEATURE_STEPS = [\n",
    "    (\"baseline\", BASE_FEATURES),                                 # raw features\n",
    "    (\"+log_duration\", BASE_FEATURES + [\"log_duration\"]),         # add log_duration\n",
    "    (\"+loudness_z\", BASE_FEATURES + [\"log_duration\", \"loudness_z\"]),\n",
    "    (\"+rhythm_x_energy\", BASE_FEATURES + [\"log_duration\", \"loudness_z\", \"rhythm_x_energy\"]),\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d77618cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:04.385888Z",
     "iopub.status.busy": "2025-09-04T14:14:04.385160Z",
     "iopub.status.idle": "2025-09-04T14:14:04.655936Z",
     "shell.execute_reply": "2025-09-04T14:14:04.654985Z"
    },
    "papermill": {
     "duration": 0.276407,
     "end_time": "2025-09-04T14:14:04.657503",
     "exception": false,
     "start_time": "2025-09-04T14:14:04.381096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train: (419331, 13) X_valid: (104833, 13)\n"
     ]
    }
   ],
   "source": [
    "df = add_features(train)\n",
    "X_all = df.drop(columns=[CFG[\"TARGET\"]])\n",
    "y_all = df[CFG[\"TARGET\"]].astype(float)\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(\n",
    "    X_all, y_all, test_size=CFG[\"TEST_SIZE\"], random_state=CFG[\"RANDOM_STATE\"]\n",
    ")\n",
    "\n",
    "print(\"X_train:\", X_train.shape, \"X_valid:\", X_valid.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4242aa10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:04.665258Z",
     "iopub.status.busy": "2025-09-04T14:14:04.664937Z",
     "iopub.status.idle": "2025-09-04T14:14:04.670787Z",
     "shell.execute_reply": "2025-09-04T14:14:04.670005Z"
    },
    "papermill": {
     "duration": 0.01164,
     "end_time": "2025-09-04T14:14:04.672393",
     "exception": false,
     "start_time": "2025-09-04T14:14:04.660753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fit_eval_xgb(Xtr, ytr, Xva, yva, features, verbose=False):\n",
    "    model = xgb.XGBRegressor(**CFG[\"XGB_PARAMS\"])\n",
    "    model.fit(\n",
    "        Xtr[features], ytr,\n",
    "        eval_set=[(Xva[features], yva)],\n",
    "        eval_metric=\"rmse\",\n",
    "        verbose=False,\n",
    "        early_stopping_rounds=CFG[\"EARLY_STOPPING_ROUNDS\"],\n",
    "    )\n",
    "    va_pred = model.predict(Xva[features])\n",
    "    rmse = mean_squared_error(yva, va_pred, squared=False)\n",
    "    if verbose:\n",
    "        print(f\"Val RMSE: {rmse:.5f}, best_iteration={model.best_iteration}\")\n",
    "    return model, rmse\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "807e63ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:04.680379Z",
     "iopub.status.busy": "2025-09-04T14:14:04.680035Z",
     "iopub.status.idle": "2025-09-04T14:14:23.213389Z",
     "shell.execute_reply": "2025-09-04T14:14:23.212067Z"
    },
    "papermill": {
     "duration": 18.5392,
     "end_time": "2025-09-04T14:14:23.215035",
     "exception": false,
     "start_time": "2025-09-04T14:14:04.675835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            step      rmse  n_features\n",
      "        baseline 26.440037           9\n",
      "     +loudness_z 26.440207          11\n",
      "   +log_duration 26.440429          10\n",
      "+rhythm_x_energy 26.440478          12\n",
      "\n",
      "Best step: baseline\n"
     ]
    }
   ],
   "source": [
    "diagnostics = []  # list of dicts: {\"step\": name, \"rmse\": value, \"n_features\": int}\n",
    "\n",
    "for name, feats in FEATURE_STEPS:\n",
    "    # ensure engineered cols exist on split frames\n",
    "    missing = [c for c in feats if c not in X_train.columns]\n",
    "    if missing:\n",
    "        print(f\"[WARN] Missing features in step '{name}': {missing}\")\n",
    "    model, rmse = fit_eval_xgb(X_train, y_train, X_valid, y_valid, feats)\n",
    "    diagnostics.append({\"step\": name, \"rmse\": rmse, \"n_features\": len(feats)})\n",
    "\n",
    "# show table\n",
    "diag_df = pd.DataFrame(diagnostics).sort_values(\"rmse\")\n",
    "print(diag_df.to_string(index=False))\n",
    "best_step = diag_df.iloc[0][\"step\"]\n",
    "print(f\"\\nBest step: {best_step}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd7e92f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:14:23.223951Z",
     "iopub.status.busy": "2025-09-04T14:14:23.223132Z",
     "iopub.status.idle": "2025-09-04T14:15:45.849942Z",
     "shell.execute_reply": "2025-09-04T14:15:45.848975Z"
    },
    "papermill": {
     "duration": 82.632981,
     "end_time": "2025-09-04T14:15:45.851651",
     "exception": false,
     "start_time": "2025-09-04T14:14:23.218670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions shape: (174722,)\n"
     ]
    }
   ],
   "source": [
    "# pick feature list by name\n",
    "name_to_feats = {name: feats for name, feats in FEATURE_STEPS}\n",
    "best_feats = name_to_feats[best_step]\n",
    "\n",
    "# re-add features to full train and test\n",
    "train_fe = add_features(train)\n",
    "test_fe  = add_features(test)\n",
    "\n",
    "X = train_fe[best_feats]\n",
    "y = train_fe[CFG[\"TARGET\"]].astype(float)\n",
    "\n",
    "final_model = xgb.XGBRegressor(**CFG[\"XGB_PARAMS\"])\n",
    "final_model.fit(\n",
    "    X, y,\n",
    "    eval_set=[(X, y)],\n",
    "    eval_metric=\"rmse\",\n",
    "    verbose=False\n",
    ")\n",
    "\n",
    "test_pred = final_model.predict(test_fe[best_feats]).astype(float)\n",
    "print(\"Predictions shape:\", test_pred.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a1639407",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:15:45.860022Z",
     "iopub.status.busy": "2025-09-04T14:15:45.859709Z",
     "iopub.status.idle": "2025-09-04T14:15:46.262903Z",
     "shell.execute_reply": "2025-09-04T14:15:46.262110Z"
    },
    "papermill": {
     "duration": 0.409139,
     "end_time": "2025-09-04T14:15:46.264330",
     "exception": false,
     "start_time": "2025-09-04T14:15:45.855191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved: /kaggle/working/submit_ver_2_1.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>BeatsPerMinute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>524164</td>\n",
       "      <td>118.001411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>524165</td>\n",
       "      <td>116.773735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>524166</td>\n",
       "      <td>117.008095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524167</td>\n",
       "      <td>118.848129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>524168</td>\n",
       "      <td>123.064240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  BeatsPerMinute\n",
       "0  524164      118.001411\n",
       "1  524165      116.773735\n",
       "2  524166      117.008095\n",
       "3  524167      118.848129\n",
       "4  524168      123.064240"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub = pd.DataFrame({\n",
    "    CFG[\"ID_COL\"]: test[CFG[\"ID_COL\"]],\n",
    "    CFG[\"TARGET\"]: test_pred\n",
    "})\n",
    "sub.to_csv(CFG[\"SUBMISSION_PATH\"], index=False)\n",
    "print(\"Saved:\", CFG[\"SUBMISSION_PATH\"])\n",
    "sub.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34796034",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-04T14:15:46.273051Z",
     "iopub.status.busy": "2025-09-04T14:15:46.272704Z",
     "iopub.status.idle": "2025-09-04T14:15:46.278340Z",
     "shell.execute_reply": "2025-09-04T14:15:46.277437Z"
    },
    "papermill": {
     "duration": 0.011588,
     "end_time": "2025-09-04T14:15:46.279757",
     "exception": false,
     "start_time": "2025-09-04T14:15:46.268169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Diagnostics: RMSE by Feature Step (lower is better) ===\n",
      "        baseline | RMSE = 26.44004 | n_features = 9\n",
      "   +log_duration | RMSE = 26.44043 | n_features = 10\n",
      "     +loudness_z | RMSE = 26.44021 | n_features = 11\n",
      "+rhythm_x_energy | RMSE = 26.44048 | n_features = 12\n",
      "\n",
      "Best configuration:\n",
      "{'step': 'baseline', 'rmse': 26.440036684872616, 'n_features': 9}\n"
     ]
    }
   ],
   "source": [
    "# Sorted by the order we ran, highlighting improvements step-by-step\n",
    "print(\"=== Diagnostics: RMSE by Feature Step (lower is better) ===\")\n",
    "for d in diagnostics:\n",
    "    print(f\"{d['step']:>16s} | RMSE = {d['rmse']:.5f} | n_features = {d['n_features']}\")\n",
    "\n",
    "best = min(diagnostics, key=lambda x: x[\"rmse\"])\n",
    "print(\"\\nBest configuration:\")\n",
    "print(best)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69071831",
   "metadata": {
    "papermill": {
     "duration": 0.003486,
     "end_time": "2025-09-04T14:15:46.287122",
     "exception": false,
     "start_time": "2025-09-04T14:15:46.283636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13345277,
     "sourceId": 91720,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 114.447604,
   "end_time": "2025-09-04T14:15:47.111481",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-04T14:13:52.663877",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
