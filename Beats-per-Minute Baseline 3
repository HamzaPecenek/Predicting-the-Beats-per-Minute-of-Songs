{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91720,"databundleVersionId":13345277,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ==============\n# Imports\n# ==============\nimport os\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nimport xgboost as xgb\n\npd.set_option(\"display.max_columns\", None)\n\n\n# =========================\n# CFG: tweak all params here\n# =========================\nCFG = {\n    \"DATA_DIR\": \"/kaggle/input/playground-series-s5e9/\",\n    \"TRAIN_FILE\": \"train.csv\",\n    \"TEST_FILE\": \"test.csv\",\n    \"SAMPLE_SUB_FILE\": \"sample_submission.csv\",\n    \"TARGET\": \"BeatsPerMinute\",\n    \"ID_COL\": \"id\",\n\n    # split & seed\n    \"TEST_SIZE\": 0.20,           # 0.2 = 80/20 split\n    \"RANDOM_STATE\": 42,\n\n    # xgboost params (keep simple for now)\n    \"XGB_PARAMS\": {\n        \"n_estimators\": 2000,\n        \"learning_rate\": 0.03,\n        \"max_depth\": 6,\n        \"subsample\": 0.9,\n        \"colsample_bytree\": 0.9,\n        \"reg_alpha\": 0.0,\n        \"reg_lambda\": 1.0,\n        \"random_state\": 42,\n        \"n_jobs\": -1,\n        \"tree_method\": \"hist\",     # good default on CPU\n    },\n    \"EARLY_STOPPING_ROUNDS\": 100,\n\n    # output\n    \"SUBMISSION_PATH\": \"/kaggle/working/submit_ver_2_1.csv\",\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:10:13.980663Z","iopub.execute_input":"2025-09-04T14:10:13.980970Z","iopub.status.idle":"2025-09-04T14:10:15.605582Z","shell.execute_reply.started":"2025-09-04T14:10:13.980947Z","shell.execute_reply":"2025-09-04T14:10:15.604302Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"train_path = os.path.join(CFG[\"DATA_DIR\"], CFG[\"TRAIN_FILE\"])\ntest_path  = os.path.join(CFG[\"DATA_DIR\"], CFG[\"TEST_FILE\"])\n\ntrain = pd.read_csv(train_path)\ntest  = pd.read_csv(test_path)\n\nprint(\"Train shape:\", train.shape)\nprint(\"Test  shape:\", test.shape)\nassert CFG[\"TARGET\"] in train.columns\nassert CFG[\"ID_COL\"] in train.columns and CFG[\"ID_COL\"] in test.columns\n\ntrain.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:10:26.439701Z","iopub.execute_input":"2025-09-04T14:10:26.440155Z","iopub.status.idle":"2025-09-04T14:10:28.793704Z","shell.execute_reply.started":"2025-09-04T14:10:26.440132Z","shell.execute_reply":"2025-09-04T14:10:28.792810Z"}},"outputs":[{"name":"stdout","text":"Train shape: (524164, 11)\nTest  shape: (174722, 10)\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id  RhythmScore  AudioLoudness  VocalContent  AcousticQuality  \\\n0   0     0.603610      -7.636942      0.023500         0.000005   \n1   1     0.639451     -16.267598      0.071520         0.444929   \n2   2     0.514538     -15.953575      0.110715         0.173699   \n3   3     0.734463      -1.357000      0.052965         0.001651   \n4   4     0.532968     -13.056437      0.023500         0.068687   \n\n   InstrumentalScore  LivePerformanceLikelihood  MoodScore  TrackDurationMs  \\\n0           0.000001                   0.051385   0.409866      290715.6450   \n1           0.349414                   0.170522   0.651010      164519.5174   \n2           0.453814                   0.029576   0.423865      174495.5667   \n3           0.159717                   0.086366   0.278745      225567.4651   \n4           0.000001                   0.331345   0.477769      213960.6789   \n\n     Energy  BeatsPerMinute  \n0  0.826267       147.53020  \n1  0.145400       136.15963  \n2  0.624667        55.31989  \n3  0.487467       147.91212  \n4  0.947333        89.58511  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>RhythmScore</th>\n      <th>AudioLoudness</th>\n      <th>VocalContent</th>\n      <th>AcousticQuality</th>\n      <th>InstrumentalScore</th>\n      <th>LivePerformanceLikelihood</th>\n      <th>MoodScore</th>\n      <th>TrackDurationMs</th>\n      <th>Energy</th>\n      <th>BeatsPerMinute</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.603610</td>\n      <td>-7.636942</td>\n      <td>0.023500</td>\n      <td>0.000005</td>\n      <td>0.000001</td>\n      <td>0.051385</td>\n      <td>0.409866</td>\n      <td>290715.6450</td>\n      <td>0.826267</td>\n      <td>147.53020</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.639451</td>\n      <td>-16.267598</td>\n      <td>0.071520</td>\n      <td>0.444929</td>\n      <td>0.349414</td>\n      <td>0.170522</td>\n      <td>0.651010</td>\n      <td>164519.5174</td>\n      <td>0.145400</td>\n      <td>136.15963</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.514538</td>\n      <td>-15.953575</td>\n      <td>0.110715</td>\n      <td>0.173699</td>\n      <td>0.453814</td>\n      <td>0.029576</td>\n      <td>0.423865</td>\n      <td>174495.5667</td>\n      <td>0.624667</td>\n      <td>55.31989</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.734463</td>\n      <td>-1.357000</td>\n      <td>0.052965</td>\n      <td>0.001651</td>\n      <td>0.159717</td>\n      <td>0.086366</td>\n      <td>0.278745</td>\n      <td>225567.4651</td>\n      <td>0.487467</td>\n      <td>147.91212</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.532968</td>\n      <td>-13.056437</td>\n      <td>0.023500</td>\n      <td>0.068687</td>\n      <td>0.000001</td>\n      <td>0.331345</td>\n      <td>0.477769</td>\n      <td>213960.6789</td>\n      <td>0.947333</td>\n      <td>89.58511</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"y = train[CFG[\"TARGET\"]].astype(float)\nprint(y.describe().to_string())\n\n# missing check\nprint(\"\\nMissing values (train):\\n\", train.isna().sum())\nprint(\"\\nMissing values (test):\\n\", test.isna().sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:10:40.650979Z","iopub.execute_input":"2025-09-04T14:10:40.651380Z","iopub.status.idle":"2025-09-04T14:10:40.730158Z","shell.execute_reply.started":"2025-09-04T14:10:40.651353Z","shell.execute_reply":"2025-09-04T14:10:40.729134Z"}},"outputs":[{"name":"stdout","text":"count    524164.000000\nmean        119.034899\nstd          26.468077\nmin          46.718000\n25%         101.070410\n50%         118.747660\n75%         136.686590\nmax         206.037000\n\nMissing values (train):\n id                           0\nRhythmScore                  0\nAudioLoudness                0\nVocalContent                 0\nAcousticQuality              0\nInstrumentalScore            0\nLivePerformanceLikelihood    0\nMoodScore                    0\nTrackDurationMs              0\nEnergy                       0\nBeatsPerMinute               0\ndtype: int64\n\nMissing values (test):\n id                           0\nRhythmScore                  0\nAudioLoudness                0\nVocalContent                 0\nAcousticQuality              0\nInstrumentalScore            0\nLivePerformanceLikelihood    0\nMoodScore                    0\nTrackDurationMs              0\nEnergy                       0\ndtype: int64\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"BASE_FEATURES = [c for c in train.columns if c not in [CFG[\"ID_COL\"], CFG[\"TARGET\"]]]\n\ndef add_features(df: pd.DataFrame) -> pd.DataFrame:\n    out = df.copy()\n\n    # 1) log duration (long-tailed)\n    if \"TrackDurationMs\" in out.columns:\n        out[\"log_duration\"] = np.log1p(out[\"TrackDurationMs\"].clip(lower=0))\n\n    # 2) z-score of AudioLoudness (often ranges negative dB)\n    if \"AudioLoudness\" in out.columns:\n        mu = train[\"AudioLoudness\"].mean()\n        sd = train[\"AudioLoudness\"].std(ddof=0)\n        out[\"loudness_z\"] = (out[\"AudioLoudness\"] - mu) / (sd if sd > 0 else 1.0)\n\n    # 3) simple interaction: RhythmScore × Energy (two strong correlates from EDA)\n    if set([\"RhythmScore\", \"Energy\"]).issubset(out.columns):\n        out[\"rhythm_x_energy\"] = out[\"RhythmScore\"] * out[\"Energy\"]\n\n    return out\n\n# We’ll define progressive feature sets for diagnostics\nFEATURE_STEPS = [\n    (\"baseline\", BASE_FEATURES),                                 # raw features\n    (\"+log_duration\", BASE_FEATURES + [\"log_duration\"]),         # add log_duration\n    (\"+loudness_z\", BASE_FEATURES + [\"log_duration\", \"loudness_z\"]),\n    (\"+rhythm_x_energy\", BASE_FEATURES + [\"log_duration\", \"loudness_z\", \"rhythm_x_energy\"]),\n]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:10:48.521727Z","iopub.execute_input":"2025-09-04T14:10:48.522067Z","iopub.status.idle":"2025-09-04T14:10:48.531308Z","shell.execute_reply.started":"2025-09-04T14:10:48.522023Z","shell.execute_reply":"2025-09-04T14:10:48.529983Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df = add_features(train)\nX_all = df.drop(columns=[CFG[\"TARGET\"]])\ny_all = df[CFG[\"TARGET\"]].astype(float)\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X_all, y_all, test_size=CFG[\"TEST_SIZE\"], random_state=CFG[\"RANDOM_STATE\"]\n)\n\nprint(\"X_train:\", X_train.shape, \"X_valid:\", X_valid.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:10:54.194839Z","iopub.execute_input":"2025-09-04T14:10:54.195196Z","iopub.status.idle":"2025-09-04T14:10:54.495923Z","shell.execute_reply.started":"2025-09-04T14:10:54.195170Z","shell.execute_reply":"2025-09-04T14:10:54.495023Z"}},"outputs":[{"name":"stdout","text":"X_train: (419331, 13) X_valid: (104833, 13)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"def fit_eval_xgb(Xtr, ytr, Xva, yva, features, verbose=False):\n    model = xgb.XGBRegressor(**CFG[\"XGB_PARAMS\"])\n    model.fit(\n        Xtr[features], ytr,\n        eval_set=[(Xva[features], yva)],\n        eval_metric=\"rmse\",\n        verbose=False,\n        early_stopping_rounds=CFG[\"EARLY_STOPPING_ROUNDS\"],\n    )\n    va_pred = model.predict(Xva[features])\n    rmse = mean_squared_error(yva, va_pred, squared=False)\n    if verbose:\n        print(f\"Val RMSE: {rmse:.5f}, best_iteration={model.best_iteration}\")\n    return model, rmse\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:11:02.266378Z","iopub.execute_input":"2025-09-04T14:11:02.266782Z","iopub.status.idle":"2025-09-04T14:11:02.275450Z","shell.execute_reply.started":"2025-09-04T14:11:02.266750Z","shell.execute_reply":"2025-09-04T14:11:02.274130Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"diagnostics = []  # list of dicts: {\"step\": name, \"rmse\": value, \"n_features\": int}\n\nfor name, feats in FEATURE_STEPS:\n    # ensure engineered cols exist on split frames\n    missing = [c for c in feats if c not in X_train.columns]\n    if missing:\n        print(f\"[WARN] Missing features in step '{name}': {missing}\")\n    model, rmse = fit_eval_xgb(X_train, y_train, X_valid, y_valid, feats)\n    diagnostics.append({\"step\": name, \"rmse\": rmse, \"n_features\": len(feats)})\n\n# show table\ndiag_df = pd.DataFrame(diagnostics).sort_values(\"rmse\")\nprint(diag_df.to_string(index=False))\nbest_step = diag_df.iloc[0][\"step\"]\nprint(f\"\\nBest step: {best_step}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:11:06.893351Z","iopub.execute_input":"2025-09-04T14:11:06.893744Z","iopub.status.idle":"2025-09-04T14:11:28.728235Z","shell.execute_reply.started":"2025-09-04T14:11:06.893710Z","shell.execute_reply":"2025-09-04T14:11:28.726837Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"            step      rmse  n_features\n        baseline 26.440037           9\n     +loudness_z 26.440207          11\n   +log_duration 26.440429          10\n+rhythm_x_energy 26.440478          12\n\nBest step: baseline\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# pick feature list by name\nname_to_feats = {name: feats for name, feats in FEATURE_STEPS}\nbest_feats = name_to_feats[best_step]\n\n# re-add features to full train and test\ntrain_fe = add_features(train)\ntest_fe  = add_features(test)\n\nX = train_fe[best_feats]\ny = train_fe[CFG[\"TARGET\"]].astype(float)\n\nfinal_model = xgb.XGBRegressor(**CFG[\"XGB_PARAMS\"])\nfinal_model.fit(\n    X, y,\n    eval_set=[(X, y)],\n    eval_metric=\"rmse\",\n    verbose=False\n)\n\ntest_pred = final_model.predict(test_fe[best_feats]).astype(float)\nprint(\"Predictions shape:\", test_pred.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:11:45.666188Z","iopub.execute_input":"2025-09-04T14:11:45.666506Z","iopub.status.idle":"2025-09-04T14:13:11.732234Z","shell.execute_reply.started":"2025-09-04T14:11:45.666482Z","shell.execute_reply":"2025-09-04T14:13:11.731037Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Predictions shape: (174722,)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"sub = pd.DataFrame({\n    CFG[\"ID_COL\"]: test[CFG[\"ID_COL\"]],\n    CFG[\"TARGET\"]: test_pred\n})\nsub.to_csv(CFG[\"SUBMISSION_PATH\"], index=False)\nprint(\"Saved:\", CFG[\"SUBMISSION_PATH\"])\nsub.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:13:27.144746Z","iopub.execute_input":"2025-09-04T14:13:27.145100Z","iopub.status.idle":"2025-09-04T14:13:27.576577Z","shell.execute_reply.started":"2025-09-04T14:13:27.145075Z","shell.execute_reply":"2025-09-04T14:13:27.575519Z"}},"outputs":[{"name":"stdout","text":"Saved: /kaggle/working/submit_ver_2_1.csv\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"       id  BeatsPerMinute\n0  524164      118.001411\n1  524165      116.773735\n2  524166      117.008095\n3  524167      118.848129\n4  524168      123.064240","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>BeatsPerMinute</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>524164</td>\n      <td>118.001411</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>524165</td>\n      <td>116.773735</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>524166</td>\n      <td>117.008095</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>524167</td>\n      <td>118.848129</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>524168</td>\n      <td>123.064240</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"# Sorted by the order we ran, highlighting improvements step-by-step\nprint(\"=== Diagnostics: RMSE by Feature Step (lower is better) ===\")\nfor d in diagnostics:\n    print(f\"{d['step']:>16s} | RMSE = {d['rmse']:.5f} | n_features = {d['n_features']}\")\n\nbest = min(diagnostics, key=lambda x: x[\"rmse\"])\nprint(\"\\nBest configuration:\")\nprint(best)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:13:29.366903Z","iopub.execute_input":"2025-09-04T14:13:29.367865Z","iopub.status.idle":"2025-09-04T14:13:29.373688Z","shell.execute_reply.started":"2025-09-04T14:13:29.367830Z","shell.execute_reply":"2025-09-04T14:13:29.372482Z"}},"outputs":[{"name":"stdout","text":"=== Diagnostics: RMSE by Feature Step (lower is better) ===\n        baseline | RMSE = 26.44004 | n_features = 9\n   +log_duration | RMSE = 26.44043 | n_features = 10\n     +loudness_z | RMSE = 26.44021 | n_features = 11\n+rhythm_x_energy | RMSE = 26.44048 | n_features = 12\n\nBest configuration:\n{'step': 'baseline', 'rmse': 26.440036684872616, 'n_features': 9}\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}